
<form action="/example" method="POST" id = "mForm">
    <input type = "text" name = "search" placeholder="Enter a search term..."/>
    <input type = "submit" value = "Search"/>
</form>


<div class="posts">
    <div class="row justify-content-center">
        <div class="col-lg-7" style="margin-top: 50px;">
            <div class="card">
                    <ul class="list-group">
                        <input type="text" placeholder="Enter a search term... " id="searchTerm">
                        <button type="button" onclick="Search()"> Display</button>
                        </input>
                       
                        

                        <li class="list-group-item">This is suppose to a match</li>
                        <li class="list-group-item">This is suppose to a match</li>
                        <li class="list-group-item">This is suppose to a match</li>
                        <li class="list-group-item">This is suppose to a match</li>
                        <li class="list-group-item">This is suppose to a match</li>
                        <li class="list-group-item">This is suppose to a match</li>
                        <li class="list-group-item">This is suppose to a match</li>
                        <li class="list-group-item">This is suppose to a match</li>
                        <li class="list-group-item">This is suppose to a match</li>
                        <li class="list-group-item">This is suppose to a match</li>
                        
                    </ul>
                </div>
            </div>
        </div>
</div>




{{!-- Web-based Interface : You can decide to create a Web-based interface. 
The interface should contain a textbox, and a search button. When you click search, 
you should see a list of results (e.g., first 10) returned by Lucene for this 
query and their scores. The list should be ordered in decreasing order of 
score. Handle fields as you deem appropriate. For Twitter, order by a 
combination of time and relevance; describe your ranking function. 
You can use the web development language of your choice. 
Do not use SOLR or another framework that automatically builds the UI for you. --}}

<script>
    
    function Search(){
        fetch(`http://localhost:3000/test`)
            .then(res=>res.json())
            .then((res) => {
                console.log(res)
            
        }).catch((e) => { console.log(e) }).catch((e) => { console.log(e) })
    }
    
    interval = window.setInterval(function() {
        console.log("hello")
        /*
        fetch("https://cs172-7ba083.es.westus2.azure.elastic-cloud.com:9243/test1/_search", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization:
                     "key bzJMUV9Ia0JhOGU5ZnM2TEFOWXk6UEcwZVh0bkFUZDZtcXR1WGFSelhqUQ==",
            },
    
            //make sure to serialize your JSON body
            body: JSON.stringify({
                query: {
                    match: { text: "test" },
                },
            })
            })
            .then( (response) => { 
            //do something awesome that makes the world a better place
            console.log(response.json)
            });
            */
        


        //fetch(`http://localhost:3000/test`)
        //    .then(res=>res.json())
        //    .then((res) => {
        //        console.log(res)
            
        //}).catch((e) => { console.log(e) }).catch((e) => { console.log(e) })
    }, 1100);

</script>